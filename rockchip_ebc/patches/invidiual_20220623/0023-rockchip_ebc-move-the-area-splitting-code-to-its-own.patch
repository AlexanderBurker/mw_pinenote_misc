From 74cfa9aaf87f2f0b93a65052c248f0bd21b4b422 Mon Sep 17 00:00:00 2001
From: Maximilian Weigand <mweigand@mweigand.net>
Date: Fri, 17 Jun 2022 11:08:08 +0200
Subject: [PATCH 23/38] [rockchip_ebc] move the area-splitting code to its own
 function and hopefully fix the pointer-usage and list-handlings bugs.

Also, try to split areas even if the other area was not started yet. I'm
not really sure if this brings benefits, but the idea is that if we have
smaller areas, then future overlaps will probably happen less.
---
 drivers/gpu/drm/rockchip/rockchip_ebc.c | 265 +++++++++++++++---------
 1 file changed, 162 insertions(+), 103 deletions(-)

diff --git a/drivers/gpu/drm/rockchip/rockchip_ebc.c b/drivers/gpu/drm/rockchip/rockchip_ebc.c
index 819e4bf28595..52bf5d11ec57 100644
--- a/drivers/gpu/drm/rockchip/rockchip_ebc.c
+++ b/drivers/gpu/drm/rockchip/rockchip_ebc.c
@@ -415,11 +415,157 @@ static void rockchip_ebc_global_refresh(struct rockchip_ebc *ebc,
 	memcpy(ctx->prev, ctx->next, gray4_size);
 }
 
+/*
+ * Returns true if the area was split, false otherwise
+ */
+static int try_to_split_area(
+		struct list_head *areas,
+	    struct rockchip_ebc_area *area,
+	    struct rockchip_ebc_area *other,
+	    int * split_counter,
+	    struct rockchip_ebc_area **p_next_area,
+		struct drm_rect * intersection
+	    ){
+
+	// for now, min size if 2x2
+	if ((area->clip.x2 - area->clip.x1 < 2) | (area->clip.y2 - area->clip.y1 < 2))
+		return 0;
+
+	// ok, we want to split this area and start with any partial areas
+	// that are not overlapping (well, let this be decided upon at the
+	// next outer loop - we delete this area so we need not to juggle
+	// around the four areas until we found the one that is actually
+	// overlapping)
+	int xmin, xmax, ymin, ymax, xcenter, ycenter;
+
+	bool no_xsplit = false;
+	bool no_ysplit = false;
+	bool split_both = true;
+
+	xmin = area->clip.x1;
+	if (intersection->x1 > xmin)
+		xcenter = intersection->x1;
+	else
+		xcenter = intersection->x2;
+	xmax = area->clip.x2;
+
+	ymin = area->clip.y1;
+	if (intersection->y1 > ymin)
+		ycenter = intersection->y1;
+	else
+		ycenter = intersection->y2;
+	ymax = area->clip.y2;
+
+	if ((xmin == xcenter) | (xcenter == xmax)){
+		no_xsplit = true;
+		split_both = false;
+	}
+	if ((ymin == ycenter) | (ycenter == ymax)){
+		no_ysplit = true;
+		split_both = false;
+	}
+
+	// can we land here at all???
+	if (no_xsplit && no_ysplit)
+		return 0;
+
+	// we do not want to overhelm the refresh thread and limit us to a
+	// certain number of splits. The rest needs to wait
+	if (*split_counter >= split_area_limit)
+		return 0;
+
+	// we need four new rokchip_ebc_area entries that we splice into
+	// the list. Note that the currently next item shall be copied
+	// backwards because to prevent the outer list iteration from
+	// skipping over our newly created items.
+
+	struct rockchip_ebc_area * item1;
+	struct rockchip_ebc_area * item2;
+	struct rockchip_ebc_area * item3;
+	struct rockchip_ebc_area * item4;
+	item1 = kmalloc(sizeof(*item1), GFP_KERNEL);
+	if (split_both || no_xsplit)
+		item2 = kmalloc(sizeof(*item2), GFP_KERNEL);
+	if (split_both || no_ysplit)
+		item3 = kmalloc(sizeof(*item3), GFP_KERNEL);
+	if (split_both)
+		item4 = kmalloc(sizeof(*item4), GFP_KERNEL);
+
+	// TODO: Error checking!!!!
+	/* if (!area) */
+	/* 	return -ENOMEM; */
+
+	if (no_xsplit)
+		xcenter = xmax;
+
+	if (no_ysplit)
+		ycenter = ymax;
+
+	if (list_is_last(&area->list, areas)){
+		list_add_tail(&item1->list, areas);
+		if (split_both || no_xsplit)
+			list_add_tail(&item2->list, areas);
+		if (split_both || no_ysplit)
+			list_add_tail(&item3->list, areas);
+		if (split_both)
+			list_add_tail(&item4->list, areas);
+	}
+	else{
+		if (split_both)
+			__list_add(&item4->list, &area->list, area->list.next);
+		if (split_both || no_ysplit)
+			__list_add(&item3->list, &area->list, area->list.next);
+		if (split_both || no_xsplit)
+			__list_add(&item2->list, &area->list, area->list.next);
+		__list_add(&item1->list, &area->list, area->list.next);
+	}
+	*p_next_area = item1;
+
+	// now fill the areas
+
+	// always
+	item1->frame_begin = EBC_FRAME_PENDING;
+	item1->clip.x1 = xmin;
+	item1->clip.x2 = xcenter;
+	item1->clip.y1 = ymin;
+	item1->clip.y2 = ycenter;
+
+	if (split_both || no_xsplit){
+		// no xsplit
+		item2->frame_begin = EBC_FRAME_PENDING;
+		item2->clip.x1 = xmin;
+		item2->clip.x2 = xcenter;
+		item2->clip.y1 = ycenter;
+		item2->clip.y2 = ymax;
+	}
+
+	if (split_both || no_ysplit){
+		// no ysplit
+		item3->frame_begin = EBC_FRAME_PENDING;
+		item3->clip.x1 = xcenter;
+		item3->clip.x2 = xmax;
+		item3->clip.y1 = ymin;
+		item3->clip.y2 = ycenter;
+	}
+
+	if (split_both){
+		// both splits
+		item4->frame_begin = EBC_FRAME_PENDING;
+		item4->clip.x1 = xcenter;
+		item4->clip.x2 = xmax;
+		item4->clip.y1 = ycenter;
+		item4->clip.y2 = ymax;
+	}
+
+	(*split_counter)++;
+	return 1;
+}
+
 static bool rockchip_ebc_schedule_area(struct list_head *areas,
 				       struct rockchip_ebc_area *area,
 				       struct drm_device *drm,
 				       u32 current_frame, u32 num_phases,
-				       struct rockchip_ebc_area *next_area,
+				       struct rockchip_ebc_area **p_next_area,
 					   int * split_counter
 					   )
 {
@@ -460,109 +606,13 @@ static bool rockchip_ebc_schedule_area(struct list_head *areas,
 			if (drm_rect_equals(&area->clip, &intersection))
 				continue;
 
-			// for now, min size if 2x2
-			if ((area->clip.x2 - area->clip.x1 < 2) | (area->clip.y2 - area->clip.y1 < 2))
-				continue;
-
-			// ok, we want to split this area and start with any partial areas
-			// that are not overlapping (well, let this be decided upon at the
-			// next outer loop - we delete this area so we need not to juggle
-			// around the four areas until we found the one that is actually
-			// overlapping)
-			int xmin, xmax, ymin, ymax, xcenter, ycenter;
-			xmin = area->clip.x1;
-			if (intersection.x1 > xmin)
-				xcenter = intersection.x1;
-			else
-				xcenter = intersection.x2;
-			xmax = area->clip.x2;
-
-			ymin = area->clip.y1;
-			if (intersection.y1 > ymin)
-				ycenter = intersection.y1;
-			else
-				ycenter = intersection.y2;
-			ymax = area->clip.y2;
-
-			if ((xmin == xcenter) | (xcenter == xmax))
-				continue;
-			if ((ymin == ycenter) | (ycenter == ymax))
-				continue;
-
-			// we do not want to overhelm the refresh thread and limit us to a
-			// certain number of splits. The rest needs to wait
-			if (*split_counter >= split_area_limit)
+			if (try_to_split_area(areas, area, other, split_counter, p_next_area, &intersection))
+			{
+				// let the outer loop delete this area
+				return false;
+			} else {
 				continue;
-
-			// we need four new rokchip_ebc_area entries that we splice into
-			// the list. Note that the currently next item shall be copied
-			// backwards because to prevent the outer list iteration from
-			// skipping over our newly created items.
-
-			struct rockchip_ebc_area * item1;
-			struct rockchip_ebc_area * item2;
-			struct rockchip_ebc_area * item3;
-			struct rockchip_ebc_area * item4;
-			item1 = kmalloc(sizeof(*item1), GFP_KERNEL);
-			item2 = kmalloc(sizeof(*item2), GFP_KERNEL);
-			item3 = kmalloc(sizeof(*item3), GFP_KERNEL);
-			item4 = kmalloc(sizeof(*item4), GFP_KERNEL);
-
-			// TODO: Error checking!!!!
-			/* if (!area) */
-			/* 	return -ENOMEM; */
-
-			if (list_is_last(&area->list, areas)){
-				/* printk(KERN_INFO "adding to end of list\n"); */
-				list_add_tail(&item1->list, areas);
-				list_add_tail(&item2->list, areas);
-				list_add_tail(&item3->list, areas);
-				list_add_tail(&item4->list, areas);
-			}
-			else{
-				/* printk(KERN_INFO "splicing into the middle of the list\n"); */
-				__list_add(&item4->list, areas, areas->next);
-				__list_add(&item3->list, areas, areas->next);
-				__list_add(&item2->list, areas, areas->next);
-				__list_add(&item1->list, areas, areas->next);
 			}
-			next_area = item1;
-
-			// now fill the areas
-			/* printk(KERN_INFO "area1: %i %i %i %i\n", xmin, xcenter, ymin, ycenter); */
-			/* printk(KERN_INFO "area2: %i %i %i %i\n", xmin, xcenter, ycenter, ymax); */
-			/* printk(KERN_INFO "area3: %i %i %i %i\n", xcenter, xmax, ymin, ycenter); */
-			/* printk(KERN_INFO "area4: %i %i %i %i\n", xcenter, xmax, ycenter, ymax); */
-
-			item1->frame_begin = EBC_FRAME_PENDING;
-			item1->clip.x1 = xmin;
-			item1->clip.x2 = xcenter;
-			item1->clip.y1 = ymin;
-			item1->clip.y2 = ycenter;
-
-			item2->frame_begin = EBC_FRAME_PENDING;
-			item2->clip.x1 = xmin;
-			item2->clip.x2 = xcenter;
-			item2->clip.y1 = ycenter;
-			item2->clip.y2 = ymax;
-
-			item3->frame_begin = EBC_FRAME_PENDING;
-			item3->clip.x1 = xcenter;
-			item3->clip.x2 = xmax;
-			item3->clip.y1 = ymin;
-			item3->clip.y2 = ycenter;
-
-			item4->frame_begin = EBC_FRAME_PENDING;
-			item4->clip.x1 = xcenter;
-			item4->clip.x2 = xmax;
-			item4->clip.y1 = ycenter;
-			item4->clip.y2 = ymax;
-
-			(*split_counter)++;
-
-			// let the outer loop delete this area
-			return false;
-			/* continue; */
 		}
 
 		/*
@@ -578,6 +628,15 @@ static bool rockchip_ebc_schedule_area(struct list_head *areas,
 		/* Otherwise, the earliest start is the same time as that of the other
 		 * area. */
 		frame_begin = max(frame_begin, other->frame_begin);
+
+		// try to split, otherwise continue
+		if (try_to_split_area(areas, area, other, split_counter, p_next_area, &intersection))
+		{
+			// let the outer loop delete this area
+			return false;
+		} else {
+			continue;
+		}
 	}
 
 	area->frame_begin = frame_begin;
@@ -754,7 +813,7 @@ static void rockchip_ebc_partial_refresh(struct rockchip_ebc *ebc,
 			 */
 			if (area->frame_begin == EBC_FRAME_PENDING &&
 			    !rockchip_ebc_schedule_area(&areas, area, drm, frame,
-							ebc->lut.num_phases, next_area, &split_counter)) {
+							ebc->lut.num_phases, &next_area, &split_counter)) {
 				list_del(&area->list);
 				kfree(area);
 				continue;
-- 
2.30.2

